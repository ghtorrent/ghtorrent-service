#!/usr/bin/env ruby

require 'queue_stuff'
require 'email_stuff'
require 'db_stuff'

require 'sinatra'
require 'digest/sha1'
require 'haml'

include GHTorrent::Settings
include GHTorrent::Logging
include QueueStuff
include EmailStuff
include DBStuff

if ARGV.size == 0
  puts "usage: #{__FILE__} config-file.yaml"
  exit
end

config = YAML::load_file ARGV[0] 
config.each do |k,v|
  set(k.intern, v)
end

# What to do if a URL is not found
not_found do
  status 404
  haml :'404'
end

get '/' do
  haml :index
end

# Basic service logic: Handle a request and render the appropriate templates
# to answer it.
post '/requests' do
  errors = []
  name  = request[:name]
  email = request[:email]
  projects = request[:repos]

  # Parameter check
  if name.nil? or name.strip.empty?
    return haml :error, :locals => {:error => 'User name empty'}
  end

  if email.nil? or email.strip.empty?
    return haml :error, :locals => {:error => 'Email empty'}
  end

  if email.match(/^.+@.+$/).nil?
    return haml :error, :locals => {:error => "The provided email <#{email}> is not a valid email"}
  end

  if projects.nil? or projects.strip.empty?
    haml :error, :locals => {:error => 'No projects specified'}
  end

  # Check and register user if necessary
  user = db[:users].where(:email => email).first
  if user.nil?
    db[:users].insert(
        :name => name,
        :email => email
    )
    logger.info "Added user #{name} <#{email}>"
  end
  user = db[:users].where(:email => email).first

  # Check whether the user has unfinished requests
  unfinished_request =
      db.from(:request_contents, :requests)\
              .where(:request_contents__request_id => :requests__id)\
              .where(:request_contents__done => false)\
              .where(:requests__user_id => user[:id])\
              .select(:requests__hash).first

  # If there is an unfinished request return an error
  unless unfinished_request.nil?
    logger.warn("User #{name} has a pending request")
    return haml :error, :locals => {
        :error => "Your request with id <em>#{unfinished_request[:hash]}</em>
                   has not finished yet. You can only have one request at a time
                   running. You can see the status of your unfinished request
                   <a href='/lean/requests/#{unfinished_request[:hash]}'>here</a>."}
  end


  duplicates = projects.split(/\r?\n/).map{|x| x.strip}.group_by{|y| y}.select{|k,v| v.size > 1}.map{|k,v| [k,v.size]}
  duplicates.each do |k|
    errors << "#{k[0]} appears #{k[1]} times in input project list, will only include once"
  end


  projects = projects.split(/\r?\n/).map{|x| x.strip}.uniq.map do |x|

    (owner, repository) = x.split(/\//)

    # Consistency checks for reqo and owner names. This is to prevent
    # SQL injections, hopefuly.
    if owner.nil? || !owner.match(/^[a-zA-Z\-_.]+$/)
      msg = "Ignoring project: #{x} Wrong user name."
      logger.warn(msg)
      errors << msg
      next
    end

    if repository.nil? || !repository.match(/^[a-zA-Z.\-_]+$/)
      msg = "Ignoring project: #{x} Wrong project name."
      logger.warn(msg)
      errors << msg
      next
    end
    x
  end

  projects = projects.select{|x| !x.nil?}

  if projects.empty?
    logger.warn("No valid repos specified")
    return haml :error, :locals => {
        :error => "No valid repos could be found in the request"}
  end

  # Done with sanity checks, on to action. Run it in a transaction to fail
  # atomically in case of error.
  begin
    db.transaction(:rollback => :reraise, :isolation => :committed) do
      # Add the request
      req_hash = Digest::SHA1.hexdigest(("#{user}#{projects}").split(//).shuffle.join)
      db[:requests].insert(
        :user_id  => user[:id],
        :hash => req_hash,
        :created_at => Time.now
      )

      req = db[:requests].first(:hash => req_hash)

      # Add the repos to retrieve to the request
      jobs = projects.map do |x|

        (owner, repository) = x.split(/\//)

        # Make sure that the repo exists
        if db[:repos].first(:name => x).nil?
          db[:repos].insert(:name => x)
        end

        repo = db[:repos].first(:name => x)

        # Add the request for this repo
        db[:request_contents].insert(
          :repo_id => repo[:id],
          :request_id => req[:id],
          :created_at => Time.now
        )

        [req[:id], owner, repository].flatten
      end.select{|x| !x.nil?}

      # All requests are in the db, add them to the queue as well.
      jobs.each do |x|
        logger.debug("Adding job: #{x[0]} -> #{x[1]}/#{x[2]}")
        amqp_exchange.publish("#{x[0]} #{x[1]} #{x[2]}",
                              {:timestamp => Time.now.to_i,
                               :persistent => true,
                               :routing_key => JOB_QUEUE_ROUTEKEY})
      end
      send_req_succeed(email, name, req[:hash], "/requests/#{req[:hash]}")

      return haml :result, :locals => {:errors => errors,
                                       :url => "/requests/#{req[:hash]}"}
    end
  rescue Exception => e
    logger.error e.message
    logger.error e.backtrace.join("\n")

    send_email('G.Gousios@tudelft.nl',
               [e.message, e.backtrace.join("\n")].join("\n\n"))
    return haml :error, :locals => {
        :error => 'An error occured that prevented GHTorrent to fullfil your
                   request. Please try again later.'}
  end
end

# Request status display
get '/requests/:id' do |id|

  if id.nil? or id.strip.empty? or id.size < 40
    return haml :error, :locals => {:error => 'Incorrect request id'}
  end

  id = id[0..39]
  req = db[:requests].first(:hash => id)

  if req.nil?
    return haml :error, :locals => {:error => 'Non-existent request'}
  end

  db[:request_contents].where(:request_id => req[:id]).all\
                       .reduce('<ul>') do |acc, rc|
    repo = db[:repos].first(:id => rc[:repo_id])
    status_msgs = db[:request_contents_status].where(:request_content_id => rc[:id]).all

    acc << '<li>' << repo[:name] << '</li>'
    if status_msgs.size > 0
      acc << '<ul>'
      status_msgs.each do |msg|
        acc << '<li>[' << msg[:created_at].to_s << '] ' << msg[:status] << ' -- ' << msg[:text] << '</li>'
      end
      acc << '</ul>'
    end
    acc
  end << '</ul>'

end

public

# This is to ensure that settings exposed by Sinatra and settings required
# GHTorrent are compatible to each other.
def [](key)
  settings.send(key.to_s)
end

__END__

@@index
!!! 5
%html
  %head
    %meta(charset="utf-8")
%body
  .content
  %form{ :action => "/lean/requests", :method => "post"}
    %fieldset
      %label{:for => "name"} Name:
      %input{:type => "text", :name => "name", :required => true}
      %br/
      %label{:for => "mail"} Email:
      %input{:type => "text", :name => "email", :required => true}

      %br/
      %label{:for => "body"} Enter the names of the repositories you want to retrieve, one per line:
      %br/
      %textarea{:name => "repos", :cols => "40", :rows => "30"}
      %br/
      %input{:type => "submit", :value => "Send", :class => "button"}

@@result
!!! 5
%html
  %head
    %meta(charset="utf-8")
%body
  .content Thanks for using GHTorrent. We sent you an email with a unique URL. Use it to check the status of your request. We will also send you an email when your request is ready to download.

  .content You can view your request status here: url

  - if errors.size > 0
    .content Your request generated the following warnings:
    %ul
      - errors.each do |error|
        %li= error


@@status
!!! 5
%html
  %head
    %meta(charset="utf-8")
%body
  .content


@@error
!!! 5
%html
  %head
    %meta(charset="utf-8")
%body
  %h1 Error
  .content #{error}


@@ 404
  .error.title
    Nothing to see here...

